
@page "/auth/login"

@using TeamWork.Data.Usr

@inject IUserAsync userSvc
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject NavigationManager NavigationManager


    <div class="wrapper fadeInDown vcenter" >
        <div id="formContent">
            <!-- Tabs Titles -->
            <h2 class="active"> Sign In </h2>
            <h2 class="inactive underlineHover">Sign Up </h2>

            <!-- Icon -->
            <div class="fadeIn first" py="10">
                <img src="/img/ktds_logo.png"   />
            </div>

            <!-- Login Form -->
            <EditForm Model="@user" OnSubmit="@TryLogin">
                <InputText type="text" id="email" class="fadeIn second" name="email" placeholder="email" @bind-Value="@user.EMAIL" />
                <InputText type="text" id="password" class="fadeIn third" name="login" placeholder="password" @bind-Value="@user.PASSWORD"  />
                <input type="submit" class="fadeIn fourth" value="Log In">
            </EditForm>

                <!-- Remind Passowrd -->
           <div id="formFooter">
                    <a class="underlineHover" href="#">Forgot Password?</a>
           </div>

        </div>
    </div>


    <AlertModal @ref="alertModal" Title="@ConfirmTitle" Message="@ConfirmMessage" OnConfirmCallback="@OnConfirm" />


@code {


    User user = new User();

    protected async Task OnBtnClick()
    {
        /*
        user.CREATOR = "null";

        user.ORGN_NAME = "고객DX솔루션팀";
        user.PART_NAME = "AntBot";
        user.USER_NAME = "진광철";

            */

        user = await userSvc.AddUserAsync(user);

        user = await userSvc.GetUserByIdAsync(user.USER_ID);

    }

    public async Task TryLogin()
    {
        User userInfo = new User();
        userInfo = await userSvc.LogIn(user.EMAIL, user.PASSWORD);


        if (userInfo == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "login failed");
        }
        else
        {
            ((SiteAuthenticationStateProvider)AuthenticationStateProvider).SetAuthenticationStateAsync(userInfo.EMAIL, userInfo.USER_NAME, userInfo.ORGN_NAME);

            await sessionStorage.SetItemAsync("UserName", userInfo.USER_NAME);
            await sessionStorage.SetItemAsync("EMailAddr", userInfo.EMAIL);
            await sessionStorage.SetItemAsync("OrgnName", userInfo.ORGN_NAME);

            NavigationManager.NavigateTo("/");

            //ShowMessage("Login Succeed", userInfo.USER_NAME + "님 환영합니다.");
        }

    }

    AlertModal alertModal;

    public string ConfirmTitle { get; set; }
    public string ConfirmMessage { get; set; }

    protected void ShowMessage(string sTitle, string sMessage)
    {
        ConfirmTitle = sTitle;
        ConfirmMessage = sMessage;

        alertModal.ModalShow();
    }

    protected void OnConfirm()
    {
        NavigationManager.NavigateTo("/");
    }


}
