@page "/repmergecomp"

@using VideoAppCore.Data.Models

@inject IReportAsync reportSvc
@inject IJSRuntime JSRuntime



@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="row">
    <div class="container-fluid portfolio-item">

       
            <div class="card h-100">
                <div class="card-header">
                    <label class="px-4"> @Title </label>
                    <input type="date" @bind="_strt_date" @bind:format="yyyy-MM-dd" />
                    <label class="px-2"> ~ </label>
                    <input type="date" @bind="_end_date" @bind:format="yyyy-MM-dd" />
                </div>
                <div class="card-body">
                    <textarea id="@EditorId" name="editordata" />
                </div>
            </div>

        
    </div>
</div>

@code{

    Report report;


    //[Parameter]
    public string Title { get; set; }

    protected DateTime _strt_date;
    [Parameter]
    public string StrtDate { get { return _strt_date.ToString("yyyy-MM-dd"); } set { _strt_date = DateTime.Parse(value); } }

    protected DateTime _end_date;
    [Parameter]
    public string EndDate { get { return _end_date.ToString("yyyy-MM-dd"); } set { _end_date = DateTime.Parse(value); } }

    [Parameter]
    public string EditorId { get; set; }

    private string _module_name;
    public string ModuleName { get { return _module_name; }  set { _module_name = value; } }


    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AddtionalAttributes { get; set; }

    [Parameter]
    public Action<Report> SaveSucceed { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (EditorId != "")
        {
            await JSRuntime.InvokeVoidAsync("addEventListener", EditorId);
        }

        if (!firstRender)
            return;

        await Query(0, StrtDate);
    }

    protected override async Task OnParametersSetAsync()
    {
        _strt_date = DateTime.Parse(StrtDate);
        _end_date = DateTime.Parse(EndDate);

        Title = _strt_date.ToString("MM") + "월 " + GetWeekNumberOfMonth(_strt_date).ToString() + "주";
    }


    private int GetWeekNumberOfMonth(DateTime date)
    {
        date = date.Date;
        DateTime firstMonthDay = new DateTime(date.Year, date.Month, 1);
        DateTime firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
        if (firstMonthMonday > date)
        {
            firstMonthDay = firstMonthDay.AddMonths(-1);
            firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
        }
        return (date - firstMonthMonday).Days / 7 + 1;
    }


    public async Task Clear(string start_date, string end_date)
    {
        StrtDate = start_date;
        EndDate = end_date;

        ModuleName = "";

        await JSRuntime.InvokeAsync<string>
            ("setData", EditorId, "");

        if(report != null)
        {
            report = null;
            report = new Report(DateTime.Parse(start_date));
        }
    }

    public async Task<Report> Query(int reportId, string dt)
    {
        string sUser = await sessionStorage.GetItemAsync<string>("EMailAddr");

        if (reportId > 0)
            report = await reportSvc.GetReportByIdAsync(report.REPORT_ID);
        else
            report = await reportSvc.GetReportByDate(sUser, DateTime.Parse(dt));

        if (report != null)
        {
            _module_name = report.MODULE_NAME;

            _strt_date = report.STRT_DATE;
            _end_date = report.END_DATE;

            await JSRuntime.InvokeAsync<string>
                ("setData", EditorId, report.REPORT_CONTENT);
        }
        else
        {
            report = new Report(DateTime.Parse(dt));
        }

        StateHasChanged();

        return report;
    }


    public async Task Save()
    {

        if (report.REPORT_ID > 0)
        {
            report.MODIFIER = await sessionStorage.GetItemAsync<string>("EMailAddr");
        }
        else
        {
            report.CREATOR = await sessionStorage.GetItemAsync<string>("EMailAddr");
            report.ORGN_NAME = await sessionStorage.GetItemAsync<string>("OrgnName");
            report.USER_NAME = await sessionStorage.GetItemAsync<string>("UserName");
        }

        report.MODULE_NAME = _module_name;
        report.STRT_DATE = _strt_date;
        report.END_DATE = _end_date;
        report.REPORT_CONTENT = await JSRuntime.InvokeAsync<string>("getData", EditorId);

        if(report.REPORT_ID > 0)
            report = await reportSvc.UpdateReportAsync(report);
        else
            report = await reportSvc.AddReportAsync(report);

        await Query(report.REPORT_ID, null);

        SaveSucceed?.Invoke(report);

    }



}
